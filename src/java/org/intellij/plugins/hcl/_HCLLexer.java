/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.intellij.plugins.hcl;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.EnumSet;
import static org.intellij.plugins.hcl.HCLElementTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>HCLLexer.flex</tt>
 */
public class _HCLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int D_STRING = 2;
  public static final int S_STRING = 4;
  public static final int HIL_EXPRESSION = 6;
  public static final int IN_NUMBER = 8;
  public static final int S_HEREDOC_MARKER = 10;
  public static final int S_HEREDOC_LINE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\27"+
    "\1\5\1\21\2\0\1\25\2\0\1\6\1\16\1\32\1\7\1\14"+
    "\1\4\1\11\7\10\2\10\2\0\1\24\1\33\3\0\1\13\1\46"+
    "\2\13\1\15\1\13\1\45\3\20\1\45\1\20\1\45\12\20\1\12"+
    "\2\20\1\30\1\26\1\31\1\0\1\20\1\0\1\41\1\46\2\13"+
    "\1\37\1\40\1\45\3\20\1\45\1\42\1\45\1\44\3\20\1\35"+
    "\1\43\1\34\1\36\2\20\1\12\2\20\1\22\1\0\1\23\54\0"+
    "\1\20\12\0\1\20\4\0\1\20\5\0\27\20\1\0\37\20\1\0"+
    "\u01ca\20\4\0\14\20\16\0\5\20\7\0\1\20\1\0\1\20\201\0"+
    "\5\20\1\0\2\20\2\0\4\20\1\0\1\20\6\0\1\20\1\0"+
    "\3\20\1\0\1\20\1\0\24\20\1\0\123\20\1\0\213\20\10\0"+
    "\246\20\1\0\46\20\2\0\1\20\7\0\47\20\110\0\33\20\5\0"+
    "\3\20\55\0\53\20\25\0\12\17\4\0\2\20\1\0\143\20\1\0"+
    "\1\20\17\0\2\20\7\0\2\20\12\17\3\20\2\0\1\20\20\0"+
    "\1\20\1\0\36\20\35\0\131\20\13\0\1\20\16\0\12\17\41\20"+
    "\11\0\2\20\4\0\1\20\5\0\26\20\4\0\1\20\11\0\1\20"+
    "\3\0\1\20\27\0\31\20\107\0\25\20\117\0\66\20\3\0\1\20"+
    "\22\0\1\20\7\0\12\20\4\0\12\17\1\0\20\20\4\0\10\20"+
    "\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20\3\0\4\20"+
    "\3\0\1\20\20\0\1\20\15\0\2\20\1\0\3\20\4\0\12\17"+
    "\2\20\23\0\6\20\4\0\2\20\2\0\26\20\1\0\7\20\1\0"+
    "\2\20\1\0\2\20\1\0\2\20\37\0\4\20\1\0\1\20\7\0"+
    "\12\17\2\0\3\20\20\0\11\20\1\0\3\20\1\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\5\20\3\0\1\20\22\0\1\20\17\0"+
    "\2\20\4\0\12\17\11\0\1\20\13\0\10\20\2\0\2\20\2\0"+
    "\26\20\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\36\0"+
    "\2\20\1\0\3\20\4\0\12\17\1\0\1\20\21\0\1\20\1\0"+
    "\6\20\3\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0"+
    "\2\20\3\0\2\20\3\0\3\20\3\0\14\20\26\0\1\20\25\0"+
    "\12\17\25\0\10\20\1\0\3\20\1\0\27\20\1\0\20\20\3\0"+
    "\1\20\32\0\3\20\5\0\2\20\4\0\12\17\25\0\10\20\1\0"+
    "\3\20\1\0\27\20\1\0\12\20\1\0\5\20\3\0\1\20\40\0"+
    "\1\20\1\0\2\20\4\0\12\17\1\0\2\20\22\0\10\20\1\0"+
    "\3\20\1\0\51\20\2\0\1\20\20\0\1\20\20\0\3\20\4\0"+
    "\12\17\12\0\6\20\5\0\22\20\3\0\30\20\1\0\11\20\1\0"+
    "\1\20\2\0\7\20\37\0\12\17\21\0\60\20\1\0\2\20\14\0"+
    "\7\20\11\0\12\17\47\0\2\20\1\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0"+
    "\1\20\1\0\1\20\2\0\2\20\1\0\4\20\1\0\2\20\11\0"+
    "\1\20\2\0\5\20\1\0\1\20\11\0\12\17\2\0\4\20\40\0"+
    "\1\20\37\0\12\17\26\0\10\20\1\0\44\20\33\0\5\20\163\0"+
    "\53\20\24\0\1\20\12\17\6\0\6\20\4\0\4\20\3\0\1\20"+
    "\3\0\2\20\7\0\3\20\4\0\15\20\14\0\1\20\1\0\12\17"+
    "\6\0\46\20\1\0\1\20\5\0\1\20\2\0\53\20\1\0\u014d\20"+
    "\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\51\20"+
    "\1\0\4\20\2\0\41\20\1\0\4\20\2\0\7\20\1\0\1\20"+
    "\1\0\4\20\2\0\17\20\1\0\71\20\1\0\4\20\2\0\103\20"+
    "\45\0\20\20\20\0\126\20\2\0\6\20\3\0\u026c\20\2\0\21\20"+
    "\1\0\32\20\5\0\113\20\6\0\10\20\7\0\15\20\1\0\4\20"+
    "\16\0\22\20\16\0\22\20\16\0\15\20\1\0\3\20\17\0\64\20"+
    "\43\0\1\20\4\0\1\20\3\0\12\17\46\0\12\17\6\0\130\20"+
    "\10\0\51\20\1\0\1\20\5\0\106\20\12\0\37\20\47\0\12\17"+
    "\36\20\2\0\5\20\13\0\54\20\4\0\32\20\6\0\12\17\46\0"+
    "\27\20\11\0\65\20\53\0\12\17\6\0\12\17\15\0\1\20\135\0"+
    "\57\20\21\0\7\20\4\0\12\17\51\0\36\20\15\0\2\20\12\17"+
    "\54\20\32\0\44\20\34\0\12\17\3\0\3\20\12\17\44\20\153\0"+
    "\4\20\1\0\4\20\3\0\2\20\11\0\300\20\100\0\u0116\20\2\0"+
    "\6\20\2\0\46\20\2\0\6\20\2\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\37\20\2\0\65\20\1\0\7\20\1\0"+
    "\1\20\3\0\3\20\1\0\7\20\3\0\4\20\2\0\6\20\4\0"+
    "\15\20\5\0\3\20\1\0\7\20\164\0\1\20\15\0\1\20\20\0"+
    "\15\20\145\0\1\20\4\0\1\20\2\0\12\20\1\0\1\20\3\0"+
    "\5\20\6\0\1\20\1\0\1\20\1\0\1\20\1\0\4\20\1\0"+
    "\13\20\2\0\4\20\5\0\5\20\4\0\1\20\64\0\2\20\u0a7b\0"+
    "\57\20\1\0\57\20\1\0\205\20\6\0\4\20\3\0\2\20\14\0"+
    "\46\20\1\0\1\20\5\0\1\20\2\0\70\20\7\0\1\20\20\0"+
    "\27\20\11\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0"+
    "\7\20\1\0\7\20\1\0\7\20\1\0\7\20\120\0\1\20\u01d5\0"+
    "\2\20\52\0\5\20\5\0\2\20\4\0\126\20\6\0\3\20\1\0"+
    "\132\20\1\0\4\20\5\0\51\20\3\0\136\20\21\0\33\20\65\0"+
    "\20\20\u0200\0\u19b6\20\112\0\u51d6\20\52\0\u048d\20\103\0\56\20\2\0"+
    "\u010d\20\3\0\20\20\12\17\2\20\24\0\57\20\20\0\37\20\2\0"+
    "\106\20\61\0\11\20\2\0\147\20\2\0\43\20\2\0\10\20\77\0"+
    "\13\20\1\0\3\20\1\0\4\20\1\0\27\20\35\0\64\20\16\0"+
    "\62\20\34\0\12\17\30\0\6\20\3\0\1\20\1\0\1\20\2\0"+
    "\12\17\34\20\12\0\27\20\31\0\35\20\7\0\57\20\34\0\1\20"+
    "\12\17\6\0\5\20\1\0\12\20\12\17\5\20\1\0\51\20\27\0"+
    "\3\20\1\0\10\20\4\0\12\17\6\0\27\20\3\0\1\20\3\0"+
    "\62\20\1\0\1\20\3\0\2\20\2\0\5\20\2\0\1\20\1\0"+
    "\1\20\30\0\3\20\2\0\13\20\7\0\3\20\14\0\6\20\2\0"+
    "\6\20\2\0\6\20\11\0\7\20\1\0\7\20\1\0\53\20\1\0"+
    "\12\20\12\0\163\20\15\0\12\17\6\0\u2ba4\20\14\0\27\20\4\0"+
    "\61\20\u2104\0\u016e\20\2\0\152\20\46\0\7\20\14\0\5\20\5\0"+
    "\1\20\1\0\12\20\1\0\15\20\1\0\5\20\1\0\1\20\1\0"+
    "\2\20\1\0\2\20\1\0\154\20\41\0\u016b\20\22\0\100\20\2\0"+
    "\66\20\50\0\14\20\164\0\5\20\1\0\207\20\23\0\12\17\7\0"+
    "\32\20\6\0\32\20\13\0\131\20\3\0\6\20\2\0\6\20\2\0"+
    "\6\20\2\0\3\20\43\0\14\20\1\0\32\20\1\0\23\20\1\0"+
    "\2\20\1\0\17\20\2\0\16\20\42\0\173\20\u0185\0\35\20\3\0"+
    "\61\20\57\0\40\20\20\0\21\20\1\0\10\20\6\0\46\20\12\0"+
    "\36\20\2\0\44\20\4\0\10\20\60\0\236\20\2\0\12\17\126\0"+
    "\50\20\10\0\64\20\234\0\u0137\20\11\0\26\20\12\0\10\20\230\0"+
    "\6\20\2\0\1\20\1\0\54\20\1\0\2\20\3\0\1\20\2\0"+
    "\27\20\12\0\27\20\11\0\37\20\101\0\23\20\1\0\2\20\12\0"+
    "\26\20\12\0\32\20\106\0\70\20\6\0\2\20\100\0\1\20\17\0"+
    "\4\20\1\0\3\20\1\0\33\20\54\0\35\20\3\0\35\20\43\0"+
    "\10\20\1\0\34\20\33\0\66\20\12\0\26\20\12\0\23\20\15\0"+
    "\22\20\156\0\111\20\67\0\63\20\15\0\63\20\u0310\0\65\20\56\0"+
    "\12\17\23\0\55\20\40\0\31\20\7\0\12\17\11\0\44\20\17\0"+
    "\12\17\20\0\43\20\3\0\1\20\14\0\60\20\16\0\4\20\13\0"+
    "\12\17\1\20\1\0\1\20\43\0\22\20\1\0\31\20\124\0\7\20"+
    "\1\0\1\20\1\0\4\20\1\0\17\20\1\0\12\20\7\0\57\20"+
    "\21\0\12\17\13\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\5\20\3\0\1\20\22\0\1\20\14\0\5\20"+
    "\u011e\0\60\20\24\0\2\20\1\0\1\20\10\0\12\17\246\0\57\20"+
    "\51\0\4\20\44\0\60\20\24\0\1\20\13\0\12\17\46\0\53\20"+
    "\25\0\12\17\66\0\32\20\26\0\12\17\u0166\0\100\20\12\17\25\0"+
    "\1\20\u01c0\0\71\20\u0507\0\u039a\20\346\0\304\20\u0abc\0\u042f\20\u0fd1\0"+
    "\u0247\20\u21b9\0\u0239\20\7\0\37\20\1\0\12\17\146\0\36\20\22\0"+
    "\60\20\20\0\4\20\14\0\12\17\11\0\25\20\5\0\23\20\u0370\0"+
    "\105\20\13\0\1\20\102\0\15\20\u4060\0\2\20\u0bfe\0\153\20\5\0"+
    "\15\20\3\0\11\20\7\0\12\20\u1766\0\125\20\1\0\107\20\1\0"+
    "\2\20\2\0\1\20\2\0\2\20\2\0\4\20\1\0\14\20\1\0"+
    "\1\20\1\0\7\20\1\0\101\20\1\0\4\20\2\0\10\20\1\0"+
    "\7\20\1\0\34\20\1\0\4\20\1\0\5\20\1\0\1\20\3\0"+
    "\7\20\1\0\u0154\20\2\0\31\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0\31\20\1\0"+
    "\37\20\1\0\31\20\1\0\10\20\2\0\62\17\u1000\0\305\20\u053b\0"+
    "\4\20\1\0\33\20\1\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\12\20\1\0\4\20\1\0\1\20\1\0\1\20\6\0\1\20\4\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\3\20\1\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\2\0\4\20\1\0\7\20\1\0"+
    "\4\20\1\0\4\20\1\0\1\20\1\0\12\20\1\0\21\20\5\0"+
    "\3\20\1\0\5\20\1\0\21\20\u1144\0\ua6d7\20\51\0\u1035\20\13\0"+
    "\336\20\2\0\u1682\20\u295e\0\u021e\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final int ZZ_SX = 0x0700;
  private static final int ZZ_MX = 0x10000;
  private static final int ZZ_LX = 0x110000;
  private static char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_SX);
  private static class M { static final char [] MAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_MX); }
  private static class L { static final char [] MAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_LX); }

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\1\1\3\1\1\2\4\1\5"+
    "\1\4\1\6\1\7\1\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\3\5\1\16\2\17\3\16\1\20\2\21"+
    "\1\22\2\23\1\16\1\24\1\0\3\25\2\26\1\0"+
    "\1\27\1\30\2\31\1\32\1\4\2\0\1\33\3\5"+
    "\1\34\1\35\2\25\2\0\2\27\2\30\1\0\2\4"+
    "\1\0\3\5\3\25\1\0\1\32\1\36\1\5\1\37"+
    "\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0111\0\u0111\0\u0270\0\u0111\0\u0111\0\u0111\0\u0111\0\u0111"+
    "\0\u0111\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u0111\0\u035a"+
    "\0\u0111\0\u0381\0\u0111\0\u03a8\0\u0111\0\u0111\0\u03cf\0\u0111"+
    "\0\u03f6\0\u0111\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9\0\u0111"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\u0111\0\u057c\0\u05a3\0\u05ca"+
    "\0\u05f1\0\u0111\0\u0618\0\u063f\0\u0666\0\u0111\0\u0111\0\u068d"+
    "\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0111\0\u0750\0\u0111\0\u0777"+
    "\0\u079e\0\u05ca\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0111"+
    "\0\u0861\0\u0888\0\u0111\0\u0222\0\u08af\0\u0222\0\u0222";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\13\1\10\1\14\1\15\1\16"+
    "\2\17\1\20\1\17\2\10\1\17\1\10\1\21\1\22"+
    "\1\23\1\24\1\10\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\3\17\1\33\3\17\1\34\2\17\1\35\1\36"+
    "\1\37\16\35\1\40\2\41\1\35\1\41\1\42\1\43"+
    "\20\35\1\44\1\45\16\35\1\40\2\41\1\35\1\46"+
    "\1\42\1\41\20\35\1\47\1\50\16\35\1\51\1\41"+
    "\1\52\1\35\1\41\1\42\1\41\17\35\7\0\1\53"+
    "\1\54\1\55\2\0\1\56\33\0\1\57\1\60\4\0"+
    "\1\61\4\62\1\0\1\62\1\0\2\62\13\0\13\62"+
    "\1\63\1\64\1\65\44\63\50\0\3\11\47\0\1\13"+
    "\1\0\1\66\40\0\1\13\2\0\44\13\10\0\1\15"+
    "\1\16\2\0\1\20\42\0\2\15\2\0\1\20\1\67"+
    "\21\0\1\67\17\0\2\15\1\70\1\0\1\20\1\67"+
    "\21\0\1\67\16\0\7\17\1\0\2\17\13\0\13\17"+
    "\10\0\2\20\3\0\1\71\21\0\1\71\33\0\1\72"+
    "\31\0\7\17\1\0\2\17\13\0\1\17\1\73\11\17"+
    "\7\0\7\17\1\0\2\17\13\0\5\17\1\74\5\17"+
    "\7\0\7\17\1\0\2\17\13\0\2\17\1\75\10\17"+
    "\1\35\2\0\16\35\3\0\1\35\1\0\1\42\1\0"+
    "\17\35\2\0\1\37\66\0\1\76\24\0\1\35\2\0"+
    "\23\35\1\42\20\35\2\0\1\45\46\0\1\50\66\0"+
    "\1\77\34\0\1\54\1\55\2\0\1\56\42\0\2\54"+
    "\2\0\1\56\1\100\21\0\1\100\5\0\1\101\11\0"+
    "\2\54\1\102\1\0\1\56\1\100\21\0\1\100\5\0"+
    "\1\101\11\0\2\56\3\0\1\103\21\0\1\103\5\0"+
    "\1\101\3\0\1\60\54\0\4\62\1\0\1\62\1\0"+
    "\2\62\13\0\13\62\1\0\1\104\1\105\5\0\4\62"+
    "\1\0\1\62\1\0\2\62\13\0\13\62\1\63\1\106"+
    "\1\107\44\63\2\0\1\65\44\0\6\66\1\110\40\66"+
    "\7\0\3\111\4\0\1\111\40\0\2\112\1\0\1\112"+
    "\1\0\1\112\21\0\3\112\4\0\1\112\7\0\1\113"+
    "\2\111\4\0\1\113\37\0\7\17\1\0\2\17\13\0"+
    "\2\17\1\114\10\17\7\0\7\17\1\0\2\17\13\0"+
    "\6\17\1\115\4\17\7\0\7\17\1\0\2\17\13\0"+
    "\6\17\1\116\4\17\7\0\3\117\4\0\1\117\26\0"+
    "\1\101\47\0\1\120\10\0\2\121\1\0\1\121\1\0"+
    "\1\121\21\0\3\121\4\0\1\121\7\0\1\122\2\117"+
    "\4\0\1\122\32\0\1\105\46\0\1\107\44\0\4\66"+
    "\1\123\42\66\10\0\2\111\44\0\7\17\1\0\2\17"+
    "\13\0\3\17\1\124\7\17\7\0\7\17\1\0\2\17"+
    "\13\0\7\17\1\125\3\17\7\0\7\17\1\0\2\17"+
    "\13\0\6\17\1\126\4\17\10\0\2\117\33\0\1\101"+
    "\11\0\2\121\1\0\1\121\1\0\1\121\21\0\3\121"+
    "\3\0\1\101\1\121\10\0\2\117\44\0\7\17\1\0"+
    "\2\17\13\0\3\17\1\127\7\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2262];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\10\1\2\11\1\1\6\11\5\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\0\4\1\1\11\1\0\3\1\1\11"+
    "\2\1\2\0\1\11\3\1\2\11\2\1\2\0\1\1"+
    "\1\11\1\1\1\11\1\0\2\1\1\0\4\1\1\11"+
    "\1\1\1\0\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // This parameters can be getted from capabilities
    private boolean withNumbersWithBytesPostfix;
    private boolean withInterpolationLanguage;

    public _HCLLexer(EnumSet<HCLCapability> capabilities) {
      this((java.io.Reader)null);
      this.withNumbersWithBytesPostfix = capabilities.contains(HCLCapability.NUMBERS_WITH_BYTES_POSTFIX);
      this.withInterpolationLanguage = capabilities.contains(HCLCapability.INTERPOLATION_LANGUAGE);
    }
    enum StringType {
      None, SingleQ, DoubleQ
    }
  // State data
    StringType stringType = StringType.None;
    int stringStart = -1;
    int hil = 0;
    int myHereDocMarkerLength = 0;
    int myHereDocMarkerWeakHash = 0;
    boolean myHereDocIndented = false;

    private void hil_inc() {
      hil++;
    }
    private int hil_dec() {
      assert hil > 0;
      hil--;
      return hil;
    }
    private void push_eol() {
      yypushback(getEOLLength());
    }
    private int getEOLLength() {
      if (yylength() == 0) return 0;
      char last = yycharat(yylength() - 1);
      if (last != '\r' && last != '\n') return 0;
      if ((yylength() > 1) && yycharat(yylength() - 2) == '\r') return 2;
      return 1;
    }
    private IElementType eods() {
      yybegin(YYINITIAL); stringType = StringType.None; zzStartRead = stringStart; return DOUBLE_QUOTED_STRING;
    }
    private IElementType eoss() {
      yybegin(YYINITIAL); stringType = StringType.None; zzStartRead = stringStart; return SINGLE_QUOTED_STRING;
    }
    private IElementType eoil() {
      hil=0; return stringType == StringType.SingleQ ? eoss(): eods();
    }
    private void setHereDocMarker(CharSequence marker) {
      myHereDocIndented = true; // Temprorarly set to true see #30
      int length = marker.length();
      String value = marker.toString();
      assert(length > 0);
      if (marker.charAt(0) == '-') {
        assert(length > 1);
        // Indented heredoc
        myHereDocIndented = true;
        length--;
        value = value.substring(1);
      }
      myHereDocMarkerLength = length & 0xFF;
      int hash = value.hashCode();
      myHereDocMarkerWeakHash = hash & 0xFFFF;
    }
    private void resetHereDocMarker() {
      myHereDocMarkerLength = 0;
      myHereDocMarkerWeakHash = 0;
    }
    private boolean isHereDocMarkerDefined() {
      return myHereDocMarkerLength != 0 && myHereDocMarkerWeakHash != 0;
    }
    private boolean isHereDocMarker(CharSequence input) {
      if (myHereDocIndented) input = LexerUtil.trimLeading(input);
      if ((input.length() & 0xFF) != myHereDocMarkerLength) return false;
      int hash = input.toString().hashCode();
      return myHereDocMarkerWeakHash == (hash & 0xFFFF);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HCLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed, int limit) {
    char [] map = new char[limit];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2540 && j < limit) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0 && j < limit);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          if (zzInput >= zzCMapL.length) ZZ_CMAP = zzCMapL = zzInput >= ZZ_MX ? L.MAP : M.MAP;
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case D_STRING: {
              return eods();
            }
            case 88: break;
            case S_STRING: {
              return eoss();
            }
            case 89: break;
            case HIL_EXPRESSION: {
              return eoil();
            }
            case 90: break;
            case S_HEREDOC_MARKER: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 91: break;
            case S_HEREDOC_LINE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 92: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 33: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 34: break;
          case 3: 
            { return LINE_COMMENT;
            }
          case 35: break;
          case 4: 
            { if (!withNumbersWithBytesPostfix) return NUMBER;
                                yybegin(IN_NUMBER); yypushback(yylength());
            }
          case 36: break;
          case 5: 
            { return ID;
            }
          case 37: break;
          case 6: 
            { return L_CURLY;
            }
          case 38: break;
          case 7: 
            { return R_CURLY;
            }
          case 39: break;
          case 8: 
            { stringType = StringType.SingleQ; stringStart = zzStartRead; yybegin(S_STRING);
            }
          case 40: break;
          case 9: 
            { stringType = StringType.DoubleQ; stringStart = zzStartRead; yybegin(D_STRING);
            }
          case 41: break;
          case 10: 
            { return L_BRACKET;
            }
          case 42: break;
          case 11: 
            { return R_BRACKET;
            }
          case 43: break;
          case 12: 
            { return COMMA;
            }
          case 44: break;
          case 13: 
            { return EQUALS;
            }
          case 45: break;
          case 14: 
            { 
            }
          case 46: break;
          case 15: 
            { push_eol(); return eods();
            }
          case 47: break;
          case 16: 
            { return eods();
            }
          case 48: break;
          case 17: 
            { push_eol(); return eoss();
            }
          case 49: break;
          case 18: 
            { return eoss();
            }
          case 50: break;
          case 19: 
            { push_eol(); return eoil();
            }
          case 51: break;
          case 20: 
            { if (hil_dec() <= 0) yybegin(stringType == StringType.SingleQ ? S_STRING: D_STRING);
            }
          case 52: break;
          case 21: 
            { yybegin(YYINITIAL); return NUMBER;
            }
          case 53: break;
          case 22: 
            { if (!isHereDocMarkerDefined()) {
      yybegin(YYINITIAL);
      return BAD_CHARACTER;
    }
    yybegin(S_HEREDOC_LINE);
//    zzStartRead+=getEOLLength();
    return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 54: break;
          case 23: 
            { yypushback(getEOLLength());
    setHereDocMarker(yytext());
    return HD_MARKER;
            }
          case 55: break;
          case 24: 
            { int eol = getEOLLength();
    int len = yylength();
    int len_eff = len - eol;
    assert len_eff >= 0;
    if((len_eff & 0xFF) >= myHereDocMarkerLength
       && isHereDocMarker(yytext().subSequence(0, len_eff))) {
      // End of HereDoc
      yypushback(eol);
      yybegin(YYINITIAL);
      resetHereDocMarker();
      return HD_MARKER;
    } else {
      return HD_LINE;
    }
            }
          case 56: break;
          case 25: 
            { return HD_LINE;
            }
          case 57: break;
          case 26: 
            { return BLOCK_COMMENT;
            }
          case 58: break;
          case 27: 
            { yybegin(S_HEREDOC_MARKER); return HD_START;
            }
          case 59: break;
          case 28: 
            { if (withInterpolationLanguage) {hil_inc(); yybegin(HIL_EXPRESSION);}
            }
          case 60: break;
          case 29: 
            { hil_inc();
            }
          case 61: break;
          case 30: 
            { return TRUE;
            }
          case 62: break;
          case 31: 
            { return NULL;
            }
          case 63: break;
          case 32: 
            { return FALSE;
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
