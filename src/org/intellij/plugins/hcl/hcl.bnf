/*
 * Copyright 2000-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
//  org.intellij.plugins.hcl
  parserClass = 'org.intellij.plugins.hcl.HCLParser'
  parserUtilClass = "org.intellij.plugins.hcl.psi.HCLParserUtil"
  psiPackage = 'org.intellij.plugins.hcl.psi'
  psiImplPackage = 'org.intellij.plugins.hcl.psi.impl'

  elementTypeHolderClass = 'org.intellij.plugins.hcl.HCLElementTypes'
  elementTypeClass = 'org.intellij.plugins.hcl.HCLElementType'
  psiClassPrefix = 'HCL'
  psiVisitorName = 'HCLElementVisitor'

  psiImplUtilClass = 'org.intellij.plugins.hcl.psi.impl.HCLPsiImplUtils'
  tokenTypeClass = 'org.intellij.plugins.hcl.HCLTokenType'

  implements('value') = 'org.intellij.plugins.hcl.psi.HCLElement'
  extends('value') = 'org.intellij.plugins.hcl.psi.impl.HCLElementImpl'

  tokens = [
//    space = "regexp:\s+"
    line_comment = "regexp:(//.*)|(#.*)"
    block_comment = "regexp:/\*(.|\n)*\*/"

    L_BRACKET='['
    R_BRACKET=']'
    L_CURLY='{'
    R_CURLY='}'
    COMMA=','
    EQUALS='='

    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

    NUMBER='regexp:-?(0x)?(0|[1-9])\d*(\.\d+)?([eE][-+]?\d+)?'

    TRUE='true'
    FALSE='false'
    NULL='null'

    ID="regexp:[a-zA-Z\.\-_]+"
  ]

  extends("container|literal|identifier")=value
  extends("array|object")=container
  extends("string_literal|number_literal|boolean_literal|null_literal")=literal
  implements("property")=[
    "org.intellij.plugins.hcl.psi.HCLElement"
    "com.intellij.psi.PsiNamedElement"
  ]
  implements("block")=[
    "org.intellij.plugins.hcl.psi.HCLElement"
    "com.intellij.psi.PsiNamedElement"
  ]
}

root ::= root_element*

private root_element ::= object | block | property

//private property_or_block ::= property_name (property_continue | block_continue)
//private property_continue ::= '=' value
//private block_continue ::= property_name* object

property ::= property_name ('=' value) {
  methods=[
    getName
    getNameElement
    getValue
    // suppress getValueList() accessor
    value=""
    getPresentation
  ]
  mixin="org.intellij.plugins.hcl.psi.impl.HCLPropertyMixin"
  pin('.*')=1
}

block ::= property_name+ object{
  methods=[
    getName
    getNameElements
    getObject
    // suppress getValueList() accessor
    value=""
    getPresentation
  ]
  mixin="org.intellij.plugins.hcl.psi.impl.HCLBlockMixin"
//  pin=1
}

object ::= '{' object_items? '}' {
  pin=1
  methods=[
    findProperty
    getPresentation
  ]
}

private object_items ::= object_item (','? object_item)* ','?
private object_item ::= block | property

array ::= '[' array_items? ']' {
  methods=[
    getPresentation
  ]
  pin=1
}
private array_items ::= array_item (',' array_item)* ','?
private array_item ::= literal | array

private property_name ::= identifier | string_literal

fake container ::= object | literal

value ::= literal | identifier | array | object {
  methods = [
    ID=""
    identifier=""
  ]
}

identifier ::= ID {
  methods = [
    getId
    ID=""
  ]
}


literal ::= string_literal | number_literal | boolean_literal | null_literal {
  methods = [
    isQuotedString
  ]
  mixin = 'org.intellij.plugins.hcl.psi.impl.HCLLiteralMixin'
}

string_literal::= DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING {
  methods=[
    getTextFragments
    getValue
    SINGLE_QUOTED_STRING=""
    DOUBLE_QUOTED_STRING=""
  ]
  mixin = 'org.intellij.plugins.hcl.psi.impl.HCLStringLiteralMixin'
}
number_literal::= NUMBER {
  methods=[
    getValue
    NUMBER=""
  ]
}
boolean_literal::= TRUE | FALSE {
  methods=[
    getValue
  ]
}
null_literal::= NULL


// Recoveries
private not_bracket_or_next_value ::= !(']'|value)
private not_brace_or_next_value ::= !('}'|value)

